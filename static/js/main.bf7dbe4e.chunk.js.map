{"version":3,"sources":["components/TodoList/TodoList.jsx","helpers.js","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","state","query","filterName","handleQueryChange","event","setState","target","value","handleSelectChange","preparedTodos","this","props","todos","onUserSelect","normalizeQuery","toLowerCase","filter","todo","completed","filterTodos","title","includes","todosToRender","className","type","onChange","map","key","id","readOnly","onClick","userId","React","Component","BASE_URL","request","url","options","fetch","then","result","json","CurrentUser","user","loadData","prevProps","a","data","onRemoveUser","name","email","phone","App","selectedUserId","setCurrentUser","removeUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf7dbe4e.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    filterName: 'all',\n  };\n\n  handleQueryChange = (event) => {\n    this.setState({\n      query: event.target.value,\n    });\n  }\n\n  handleSelectChange = (event) => {\n    this.setState({\n      filterName: event.target.value,\n    });\n  }\n\n  render() {\n    const { query, filterName } = this.state;\n    const { todos, onUserSelect } = this.props;\n    const normalizeQuery = query.toLowerCase();\n    let preparedTodos;\n\n    switch (filterName) {\n      case 'active':\n        preparedTodos = this.props.todos.filter(\n          todo => todo.completed === false,\n        );\n        break;\n      case 'completed':\n        preparedTodos = this.props.todos.filter(\n          todo => todo.completed === true,\n        );\n        break;\n      default:\n        preparedTodos = todos;\n    }\n\n    const filterTodos = preparedTodos.filter(todo => todo.title)\n      .filter(todo => todo.title.toLowerCase().includes(normalizeQuery));\n\n    const todosToRender = this.state.query\n      ? filterTodos\n      : preparedTodos;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          onChange={this.handleQueryChange}\n        />\n        <select\n          value={this.state.filterName}\n          onChange={this.handleSelectChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed </option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosToRender.map(todo => (\n              <li\n                className={`${!todo.completed\n                  ? 'TodoList__item TodoList__item--unchecked'\n                  : 'TodoList__item TodoList__item--checked'}`}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                  type=\"button\"\n                  onClick={() => onUserSelect(todo.userId)}\n                >\n                  {`User:#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(\n  !options\n    ? `${BASE_URL}${url}`\n    : `${BASE_URL}${url}`, options,\n)\n  .then(result => result.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state= {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({\n      user: { ...user.data },\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onRemoveUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n        <button\n          type=\"button\"\n          className=\"button__remove\"\n          onClick={() => onRemoveUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onRemoveUser: PropTypes.func.isRequired,\n};\n","import { request } from './helpers';\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos: todos.data });\n  }\n\n  setCurrentUser = (userId) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  }\n\n  removeUser = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelect={this.setCurrentUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onRemoveUser={this.removeUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}